from typing import Dict, List

import attrs

from abegidd.entities import Explanation, Prediction, Rule


def filter_explanations(
    explanations: List[Explanation], filter_condition: Dict[int, List[str]]
) -> List[Explanation]:
    """
    remove redundant explanations

    :param explanations:  explanations generated by anyburl
    :param filter_condition: filter rules
    :return: filtered explanations
    """
    filtered_explanations = []
    for explanation in explanations:
        if len(explanation.rule_tails) > 0:
            tails = explanation.rule_tails
            filtered_rule_tails = _filter_rules(tails, filter_condition)
            explanation = attrs.evolve(explanation, rule_tails=filtered_rule_tails)
        if len(explanation.rule_heads) > 0:
            heads = explanation.rule_heads
            filtered_rule_heads = _filter_rules(heads, filter_condition)
            explanation = attrs.evolve(explanation, rule_heads=filtered_rule_heads)
        filtered_explanations.append(explanation)
    return filtered_explanations


def _filter_rules(
    explanations_rules: List[Rule], filter_condition: Dict[int, List[str]]
) -> List[Rule]:
    """
    remove redundant rules

    :param explanations_rules: AnyBURL rule class.
    :param filter_condition: filter conditions
    :return: Filtered rules
    """
    rules = []

    for rule in explanations_rules:
        edge_name_lst = [edge.edge_type for edge in rule.body_atoms]

        for limit, edges in filter_condition.items():
            if any(edge_name_lst.count(edge) > int(limit) for edge in edges):
                break
        else:
            rules.append(rule)
    return rules


def filter_predictions_for_node_names(
    predictions: List[Prediction],
    node_names: List[str],
) -> List[Prediction]:
    """
    Filter the prediction results based on provided filter list

    :param predictions: predictions collection
    :param node_names: list of node pref_names to filter with
    """

    filtered_predictions = []

    for prediction in predictions:
        sliced_heads = []
        for prediction_head in prediction.predicted_heads:
            if prediction_head.entity in node_names:
                sliced_heads.append(prediction_head)

        if len(sliced_heads) > 0:
            filtered_predictions.append(
                attrs.evolve(prediction, predicted_heads=sliced_heads)
            )

    return filtered_predictions
